1) class Carrinho {
    itens: { item: string, preco: number }[];
    precoTotal: number;

    constructor() {
        this.itens = [];
        this.precoTotal = 0;
    }

    adicionarItem(item: string, preco: number): void {
        this.itens.push({ item, preco });
        this.precoTotal += preco;
    }
}

class Pagamento {
    status: string;

    constructor() {
        this.status = 'pendente';
    }

    processar(valor: number): void {
        if (valor > 0) {
            this.status = 'pago';
            console.log('Pagamento processado.');
        } else {
            console.log('Nenhum item para processar o pagamento.');
        }
    }
}

class Envio {
    status: string;

    constructor() {
        this.status = 'não enviado';
    }

    atualizarStatus(status: string): void {
        this.status = status;
        console.log(`Status de envio atualizado para ${status}.`);
    }
}

class Pedido {
    carrinho: Carrinho;
    pagamento: Pagamento;
    envio: Envio;

    constructor() {
        this.carrinho = new Carrinho();
        this.pagamento = new Pagamento();
        this.envio = new Envio();
    }

    adicionarItem(item: string, preco: number): void {
        this.carrinho.adicionarItem(item, preco);
    }

    processarPagamento(): void {
        this.pagamento.processar(this.carrinho.precoTotal);
    }

    atualizarStatusEnvio(status: string): void {
        this.envio.atualizarStatus(status);
    }
}

const meuPedido = new Pedido();
meuPedido.adicionarItem('Notebook', 2500);
meuPedido.adicionarItem('Mouse', 150);

console.log(meuPedido.carrinho.itens);
console.log(`Preço Total: ${meuPedido.carrinho.precoTotal}`);

meuPedido.processarPagamento();
console.log(`Status do Pagamento: ${meuPedido.pagamento.status}`);

meuPedido.atualizarStatusEnvio('enviado');
console.log(`Status do Envio: ${meuPedido.envio.status}`);

2) class EmailNotification {
    enviar(email: string): void {
        console.log(`Enviando email para ${email}...`);
        // Lógica fictícia de envio de email
        console.log(`Email enviado para ${email}.`);
    }
}

class UserManager {
    usuarios: { nome: string, email: string }[];
    emailNotificacao: EmailNotification;

    constructor() {
        this.usuarios = [];
        this.emailNotificacao = new EmailNotification();
    }

    criarUsuario(nome: string, email: string): void {
        this.usuarios.push({ nome, email });
        console.log(`Usuário ${nome} criado com sucesso.`);
        this.emailNotificacao.enviar(email);
    }
}

const gerenciadorUsuarios = new UserManager();
gerenciadorUsuarios.criarUsuario('Alice', 'alice@example.com');

3) class EmailSender {
    enviarEmail(contato: { nome: string, email: string }): void {
        if (this.validarContato(contato)) {
            console.log(`Enviando email para ${contato.nome} (${contato.email})...`);

            console.log(`Email enviado para ${contato.nome} (${contato.email}).`);
        } else {
            console.log('Informações de contato inválidas.');
        }
    }

    validarContato(contato: { nome: string, email: string }): boolean {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return contato.nome.trim() !== '' && emailRegex.test(contato.email);
    }
}

const emailSender = new EmailSender();
emailSender.enviarEmail({ nome: 'Carlos', email: 'carlos@example.com' });
emailSender.enviarEmail({ nome: '', email: 'carlos@example.com' }); 

4) 
