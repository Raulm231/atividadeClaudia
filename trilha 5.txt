1) abstract class TaskManager {
    protected tasks: Set<string>;

    constructor() {
        this.tasks = new Set<string>();
    }

    abstract addTask(task: string): void;

    listTasks(): string[] {
        return Array.from(this.tasks);
    }
}

class Project extends TaskManager {
    constructor() {
        super();
    }

    addTask(task: string): void {
        if (!this.tasks.has(task)) {
            this.tasks.add(task);
            console.log(`Tarefa "${task}" adicionada ao projeto.`);
        } else {
            console.log(`Tarefa "${task}" já existe no projeto.`);
        }
    }
}

class DailyTasks extends TaskManager {
    constructor() {
        super();
    }

    addTask(task: string): void {
        if (!this.tasks.has(task)) {
            this.tasks.add(task);
            console.log(`Tarefa diária "${task}" adicionada.`);
        } else {
            console.log(`Tarefa diária "${task}" já existe.`);
        }
    }
}
let meuProjeto = new Project();
meuProjeto.addTask("Desenvolver frontend");
meuProjeto.addTask("Configurar banco de dados");
meuProjeto.addTask("Desenvolver frontend"); 

console.log("Tarefas do projeto:");
console.log(meuProjeto.listTasks());

let minhasTarefasDiarias = new DailyTasks();
minhasTarefasDiarias.addTask("Reunião matinal");
minhasTarefasDiarias.addTask("Revisar código");
minhasTarefasDiarias.addTask("Reunião matinal"); 

console.log("Tarefas diárias:");
console.log(minhasTarefasDiarias.listTasks());

2) abstract class Inventory {
    protected items: Record<string, number>;

    constructor() {
        this.items = {};
    }

    abstract addItem(item: string, quantity: number): void;
    abstract removeItem(item: string): void;
    abstract getInventory(): Record<string, number>;
}
class WarehouseInventory extends Inventory {
    constructor() {
        super();
    }

    addItem(item: string, quantity: number): void {
        if (this.items[item]) {
            this.items[item] += quantity;
        } else {
            this.items[item] = quantity;
        }
        console.log(`Item "${item}" adicionado ao inventário do armazém. Quantidade: ${this.items[item]}`);
    }

    removeItem(item: string): void {
        if (this.items[item]) {
            delete this.items[item];
            console.log(`Item "${item}" removido do inventário do armazém.`);
        } else {
            console.log(`Item "${item}" não encontrado no inventário do armazém.`);
        }
    }

    getInventory(): Record<string, number> {
        return this.items;
    }
}

class StoreInventory extends Inventory {
    private maxQuantity: number = 10;

    constructor() {
        super();
    }

    addItem(item: string, quantity: number): void {
        if (this.items[item]) {
            if (this.items[item] + quantity > this.maxQuantity) {
                console.log(`Quantidade máxima de ${this.maxQuantity} unidades para "${item}" excedida. Não foi possível adicionar.`);
            } else {
                this.items[item] += quantity;
                console.log(`Item "${item}" adicionado ao inventário da loja. Quantidade: ${this.items[item]}`);
            }
        } else {
            if (quantity > this.maxQuantity) {
                console.log(`Quantidade máxima de ${this.maxQuantity} unidades para "${item}" excedida. Não foi possível adicionar.`);
            } else {
                this.items[item] = quantity;
                console.log(`Item "${item}" adicionado ao inventário da loja. Quantidade: ${this.items[item]}`);
            }
        }
    }

    removeItem(item: string): void {
        if (this.items[item]) {
            delete this.items[item];
            console.log(`Item "${item}" removido do inventário da loja.`);
        } else {
            console.log(`Item "${item}" não encontrado no inventário da loja.`);
        }
    }

    getInventory(): Record<string, number> {
        return this.items;
    }
}
let inventarioArmazem = new WarehouseInventory();
inventarioArmazem.addItem("Cadeira", 50);
inventarioArmazem.addItem("Mesa", 20);
inventarioArmazem.addItem("Cadeira", 30);
inventarioArmazem.removeItem("Mesa");

console.log("Inventário do Armazém:");
console.log(inventarioArmazem.getInventory());

let inventarioLoja = new StoreInventory();
inventarioLoja.addItem("Caneta", 5);
inventarioLoja.addItem("Caneta", 8); 
inventarioLoja.addItem("Lápis", 10);
inventarioLoja.addItem("Borracha", 12); 
inventarioLoja.removeItem("Lápis");

console.log("Inventário da Loja:");
console.log(inventarioLoja.getInventory());

3)abstract class FavoriteManager {
    protected favorites: string[];

    constructor() {
        this.favorites = [];
    }

    abstract addFavorite(item: string): void;
    abstract getFavorites(): string[];
}
class MoviesFavoriteManager extends FavoriteManager {
    constructor() {
        super();
    }

    addFavorite(item: string): void {
        if (!this.favorites.includes(item)) {
            this.favorites.push(item);
        }
    }

    getFavorites(): string[] {
        return this.favorites.sort();
    }
}
class BooksFavoriteManager extends FavoriteManager {
    constructor() {
        super();
    }

    addFavorite(item: string): void {
        if (!this.favorites.includes(item)) {
            this.favorites.unshift(item);
        }
    }

    getFavorites(): string[] {
        return this.favorites;
    }
}
let filmesFavoritos = new MoviesFavoriteManager();
filmesFavoritos.addFavorite("O Poderoso Chefão");
filmesFavoritos.addFavorite("Os Bons Companheiros");
filmesFavoritos.addFavorite("O Poderoso Chefão"); 

console.log("Filmes Favoritos (ordenados):");
console.log(filmesFavoritos.getFavorites());

let livrosFavoritos = new BooksFavoriteManager();
livrosFavoritos.addFavorite("Dom Casmurro");
livrosFavoritos.addFavorite("O Alquimista");
livrosFavoritos.addFavorite("Dom Casmurro"); 

console.log("Livros Favoritos (ordem de adição):");
console.log(livrosFavoritos.getFavorites());

4) 
abstract class VoteSystem {

    abstract voteFor(candidate: string): void;

    abstract getResults(): object;
}

class Election extends VoteSystem {
    private votes: Map<string, number>;

    constructor() {
        super();

        this.votes = new Map<string, number>();
    }

    voteFor(candidate: string): void {
        if (this.votes.has(candidate)) {
            this.votes.set(candidate, this.votes.get(candidate)! + 1);
        } else {
            this.votes.set(candidate, 1);
        }
    }


    getResults(): object {
     
        const results: { [key: string]: number } = {};
        this.votes.forEach((value, key) => {
            results[key] = value;
        });
        return results;
    }
}

class Poll extends VoteSystem {
    private votes: Map<string, number>;

    constructor() {
        super();

        this.votes = new Map<string, number>();
    }

    voteFor(candidate: string): void {
        if (this.votes.has(candidate)) {
            this.votes.set(candidate, this.votes.get(candidate)! + 1);
        } else {
            this.votes.set(candidate, 1);
        }
    }

  
    getResults(): object {

        const sortedCandidates = [...this.votes.entries()].sort((a, b) => b[1] - a[1]);
        

        return sortedCandidates.map(entry => entry[0]);
    }
}


const election = new Election();
election.voteFor("Candidato Jair");
election.voteFor("Candidato Luiz");
election.voteFor("Candidato Jair");

console.log("Resultado da Election:", election.getResults()); 

const poll = new Poll();
poll.voteFor("Candidato Jair");
poll.voteFor("Candidato Luiz");
poll.voteFor("Candidato Maria");
poll.voteFor("Candidato Paulo");

console.log("Resultado da Poll:", poll.getResults());

